apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

apply from: './versions.gradle'

apply from: './_increase_version.gradle'
static def buildTime() { return new Date().format("yyyy-MM-dd HH:mm:ss.SSSSZ", TimeZone.getTimeZone("UTC")) }
def getGitVersion() { return 'git rev-parse HEAD'.execute([], project.rootDir).text.trim() }

android {
    //compileSdkVersion 28
    compileSdkVersion Integer.parseInt(project.ANDROID_COMPILE_SDK_VERSION)
    //buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION



    defaultConfig {
        //minSdkVersion 21
        //targetSdkVersion 28
        //versionCode Integer.parseInt(project.VERSION_CODE)
        //versionName project.VERSION_NAME
        minSdkVersion project.ANDROID_MIN_SDK_VERSION
        targetSdkVersion project.ANDROID_TARGET_SDK_VERSION
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //将当前commit的
        buildConfigField "String", "GIT_SHA", "\"${getGitVersion()}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""

    }

    signingConfigs {
        Properties properties = new Properties()
        if (project.rootProject.file('local.properties').exists()) {
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
            //def sdkDir = properties.getProperty('sdk.dir')
            //def ndkDir = properties.getProperty('ndk.dir')
            def ksPath = properties.getProperty('KS_PATH')
            def keystorePropertiesFile = rootProject.file(ksPath ? ksPath : "../../keystore.properties")
            if (file(keystorePropertiesFile).exists()) {
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
                config {
                    keyAlias keystoreProperties['keyAlias']
                    keyPassword keystoreProperties['keyPassword']
                    storeFile file(keystoreProperties['storeFile'])
                    storePassword keystoreProperties['storePassword']
                }
            } else {
                //hedzrConfig {
                //    storeFile file("X:/XXXX/yourkeystore")
                //    storePassword "yourKeyPassword"
                //    keyAlias "yourAlias"
                //    keyPassword "yourAliasPassword"
                //}
            }
        }
    }

    buildTypes {
        release {
            //signingConfig  signingConfigs.hedzrConfig
            //minifyEnabled true
            //shrinkResources true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        //abortOnError false
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'  // Some libraries have issues with this.
        disable 'OldTargetApi'    // Lint gives this warning but SDK 20 would be Android L Beta.
        disable 'IconDensities'   // For testing purpose. This is safe to remove.
    }

}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0-alpha3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0-alpha3'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    //    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    //    implementation 'com.android.support:appcompat-v7:27.1.1'
    //    implementation 'com.android.support:design:27.1.1'
    //    implementation 'com.android.support:recyclerview-v7:27.1.1'
    //    implementation 'com.android.support:cardview-v7:27.1.1'
    //    implementation 'com.android.support:support-v4:27.1.1'
    //    implementation 'com.android.support:percent:27.1.1'
    //
    //    compileOnly 'com.jakewharton.timber:timber:4.7.0'

    // Crypto
    //    'org.bitcoinj:bitcoinj-core:0.14.3',
    //    'com.github.WhisperSystems:libsignal-service-java:70a0b223b2',
    //    'com.madgag.spongycastle:core:1.54.0.0',
    //    'com.madgag.spongycastle:prov:1.54.0.0',





    def lifecycle_version = arch_version


    kapt 'androidx.databinding:databinding-compiler:3.2.1'
    //kapt deps.apt_databinding

    // Mockito
    testImplementation "org.mockito:mockito-core:2.23.0"
    // tester
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttp_version"
    // debug
    debugImplementation 'com.facebook.stetho:stetho:1.5.0'
    implementation 'com.facebook.stetho:stetho-okhttp3:1.5.0'


    // --- architecture components
    //
    // ViewModel and LiveData
    compileOnly 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    // alternatively - just ViewModel
    //compileOnly "android.arch.lifecycle:viewmodel:$lifecycle_version" // use -ktx for Kotlin
    // alternatively - just LiveData
    //compileOnly "android.arch.lifecycle:livedata:$lifecycle_version"
    // alternatively - Lifecycles only (no ViewModel or LiveData), Support library depends on this lightweight import
    //compileOnly "android.arch.lifecycle:runtime:$lifecycle_version"

    kapt ('androidx.lifecycle:lifecycle-compiler:2.0.0') {
        exclude group: 'org.jetbrains.kotlin'
    }
    // alternately - if using Java8, use the following instead of compiler
    //compileOnly "android.arch.lifecycle:common-java8:$lifecycle_version"

    // optional - ReactiveStreams support for LiveData
    compileOnly 'androidx.lifecycle:lifecycle-reactivestreams:2.0.0'

    // optional - Test helpers for LiveData
    testImplementation 'androidx.arch.core:core-testing:2.0.0'

    def deps = [:]
    def room = [:]
    room.runtime = "android.arch.persistence.room:runtime:$arch_room_version"
    room.compiler = "android.arch.persistence.room:compiler:$arch_room_version"
    room.rxjava2 = "android.arch.persistence.room:rxjava2:$arch_room_version"
    room.testing = "android.arch.persistence.room:testing:$arch_room_version"
    deps.room = room
    // Room
    compileOnly 'androidx.room:room-runtime:2.0.0'
    //compileOnly deps.room.rxjava2
    testImplementation 'androidx.room:room-testing:2.0.0'
    kapt 'androidx.room:room-compiler:2.0.0'



    // --- supports
    compileOnly 'androidx.appcompat:appcompat:1.0.0'
    compileOnly 'androidx.constraintlayout:constraintlayout:1.1.2'
    compileOnly 'com.google.android.material:material:1.0.0'
    compileOnly 'androidx.recyclerview:recyclerview:1.0.0'
    compileOnly 'androidx.cardview:cardview:1.0.0'
    compileOnly 'androidx.legacy:legacy-support-v4:1.0.0'
    compileOnly 'androidx.percentlayout:percentlayout:1.0.0'
    //compileOnly "com.android.support:mediarouter-v7:$supports_lib_version"


    // --- dagger
    compileOnly "com.google.dagger:dagger:$dagger_version"
    compileOnly "com.google.dagger:dagger-android:$dagger_version"
    compileOnly "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"


    // --- reactive
    compileOnly "io.reactivex.rxjava2:rxjava:2.1.16"
    compileOnly ("io.reactivex.rxjava2:rxandroid:2.0.2") {
        exclude group: 'io.reactivex.rxjava2', module: 'rxjava'
    }
    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    // (see https://github.com/ReactiveX/RxJava/releases for latest 2.x.x version)


    // --- data
    compileOnly ("com.squareup.moshi:moshi:$moshi_version") {
        exclude group: 'org.jetbrains.kotlin'
    }
    compileOnly ("com.squareup.moshi:moshi-kotlin:$moshi_version") {
        exclude group: 'org.jetbrains.kotlin'
    }
    compileOnly "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    //compileOnly 'org.jetbrains.kotlinx:kotlinx.reflect.lite:1.0.0'
    compileOnly "com.squareup.retrofit2:retrofit:$retrofit_version"
    compileOnly "com.squareup.retrofit2:converter-moshi:$retrofit_version"
    compileOnly "com.squareup.retrofit2:adapter-rxjava2:2.3.0"
    //implementation "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0"
    compileOnly("com.squareup.retrofit2:converter-simplexml:$retrofit_version", {
        exclude module: 'stax'
        exclude module: 'stax-api'
        exclude module: 'xpp3'
    })
    compileOnly "com.github.bumptech.glide:glide:$glide_version"
    compileOnly ("com.github.bumptech.glide:okhttp3-integration:$glide_version") {
        exclude group: 'com.squareup.okhttp3'
    }
    compileOnly "com.squareup.okhttp3:logging-interceptor:$okhttp_version"


    // ----- Others
    compileOnly 'com.github.tbruyelle:rxpermissions:0.10.2'
    //compileOnly 'com.obsez.mobile.meijue.ui:meijue-ui:1.0.8'
    // https://github.com/JakeWharton/timber
    compileOnly 'com.jakewharton.timber:timber:4.7.0'
    // Glide: picture loader
    //compileOnly 'com.github.bumptech.glide:glide:4.6.1'
    // Picasso
    compileOnly 'com.squareup.picasso:picasso:2.5.2'
    // Fresco
    compileOnly 'com.facebook.fresco:fresco:1.2.0'
    //
    compileOnly 'de.hdodenhof:circleimageview:2.2.0' //
    // Retrofit
    //compileOnly 'com.squareup.retrofit2:retrofit:2.4.0'
    //compileOnly 'com.squareup.retrofit2:adapter-rxjava2:2.2.0'
    // JSON Parsing
    compileOnly 'com.google.code.gson:gson:2.8.5'
    compileOnly 'com.squareup.retrofit2:converter-gson:2.4.0'

    // Documentation https://bitbucket.org/asomov/snakeyaml/wiki/Documentation
    // https://github.com/bmoliveira/snake-yaml
    compileOnly 'com.github.bmoliveira:snake-yaml:v1.18-android'

}




ext {

    //For bintray and jcenter distribution
    bintrayRepo = 'maven'
    bintrayName = 'meijue-ui'

    publishedGroupId = 'com.obsez.mobile.meijue.ui'
    libraryName = 'MeiJueUi'
    artifact = 'meijue-ui' //This artifact name should be the same with library module name

    libraryDescription = 'android ui library <meijue>, with kotlin extensions'

    siteUrl = 'https://github.com/hedzr/meijue-ui'
    gitUrl = 'https://github.com/hedzr/meijue-ui.git'

    libraryVersion = project.VERSION_NAME // '1.0.0'

    //developerId = 'your_id'
    //developerName = 'your_name'
    //developerEmail = 'your_email'
    //organization = 'your_organization' // if you push to organization's repository.
    licenseName = 'The Apache Software License, Version 2.0'  //Example for license
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]

}

// gradle bintrayUpload

//'https://github.com/quangctkm9207/template-files/blob/master/android/gradle/install.gradle'
//'https://github.com/quangctkm9207/template-files/blob/master/android/gradle/bintray.gradle'
//apply from: 'https://raw.githubusercontent.com/quangctkm9207/template-files/master/android/gradle/install.gradle'
//apply from: 'https://raw.githubusercontent.com/quangctkm9207/template-files/master/android/gradle/bintray.gradle'
apply from: './_install.gradle'
apply from: './_bintray.gradle'
